version: '3'

services:

  tgbd:
    ports:
      - 8000:8080
    build:
      context: ./TgBd
    container_name: tgbd
    environment:
      spring.datasource.url: jdbc:postgresql://data:5432/usertg
      spring.datasource.username: memo
      spring.datasource.password: memobot
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    depends_on:
      - data
      - kafka

  tgservice:
    build:
      context: ./TgService
    container_name: tgservice
    ports:
      - 8010:8090
    restart: unless-stopped
    environment:
      spring.kafka.bootstrap-servers: kafka:9092
    depends_on:
      - tgbd
      - kafka

  data:
    image: postgres:latest
    container_name: data
    restart: always
    environment:
      POSTGRES_USER: memo
      POSTGRES_PASSWORD: memobot
      POSTGRES_DB: usertg
      POSTGRES_SCHEMA: members
      STOP_ON_MIGRATION_FAILURE: "false"
    ports:
      - 5432:5432
    volumes:
      - ./data:/var/lib/postgresql/pgdata
    healthcheck:
      test: PGPASSWORD=memobot psql -d usertg -U memo -w -c '\q'
      interval: 20s
      timeout: 10s


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1